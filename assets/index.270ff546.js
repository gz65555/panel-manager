var n=Object.defineProperty,a=Object.defineProperties,s=Object.getOwnPropertyDescriptors,e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,o=(a,s,e)=>s in a?n(a,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[s]=e,l=(n,a)=>{for(var s in a||(a={}))t.call(a,s)&&o(n,s,a[s]);if(e)for(var s of e(a))p.call(a,s)&&o(n,s,a[s]);return n},c=(n,e)=>a(n,s(e));import{R as i,a as r,b as u}from"./vendor.8c982cc3.js";const k={R:"left",L:"right",T:"bottom",B:"top"},m={width:"100%",height:"100%"},d=(n,a,s)=>{if("L"===n||"R"===n){const e=a.indexOf("T"),t=a.indexOf("B");if(e>-1)throw new Error(`Parse panel faild. The ${s+n} panel is contradict with panel ${s}T.`);if(t>-1)throw new Error(`Parse panel faild. The ${s+n} panel is contradict with panel ${s}B.`)}if("T"===n||"B"===n){const e=a.indexOf("L"),t=a.indexOf("R");if(e>-1)throw new Error(`Parse panel faild. The ${s+n} panel is contradict with panel ${s}L.`);if(t>-1)throw new Error(`Parse panel faild. The ${s+n} panel is contradict with panel ${s}R.`)}},g=(n,a,s)=>{if(s.disableCache)return n;if(!localStorage.getItem(s.name||"PANEL_MANAGER_CACHE_SIZE"))return n;try{const e=JSON.parse(localStorage.getItem(s.name||"PANEL_MANAGER_CACHE_SIZE"))[a];return l(l({},n),e)}catch(e){return n}},h=({panelPos:n,direction:a,cb:s,cacheKey:e})=>(t,p,o)=>{const c=o.getBoundingClientRect()[a],i={[n]:{[a]:`${c}px`}},r=JSON.parse(localStorage.getItem(e||"PANEL_MANAGER_CACHE_SIZE")),u=l(l({},r),i);localStorage.setItem(e||"PANEL_MANAGER_CACHE_SIZE",JSON.stringify(u)),s&&s()},f=(n,a)=>{let s=Object.keys(n);const e={};s=s.sort(((n,a)=>n.length>a.length?1:n.length<a.length?-1:0)),s.forEach((n=>{let a=e;for(let s=0;s<n.length;s+=1){const e=n[s];a[e]||(a[e]={}),a=a[e]}}));const t=((n,a={})=>function s(e,t=""){var p,o;if(!e)return null;let u=Object.keys(e);u=(n=>"BT"===n.join("")?["T","B"]:"RL"===n.join("")?["L","R"]:n)(u);const m=[];for(let f=0;f<u.length;f+=1){const y=u[f],A=`${t}${y}`,b={"data-panel-name":A,"data-panel-type":y,"data-panel-resizable":!1},w=n[`${A}T`]||n[`${A}B`];d(y,u,t);const v=n[A];let R=null;if(v){if(i.isValidElement(v))R=i.createElement("div",l({className:"panel-content-container",key:`rootPanel-${A}`},b),v,s(e[y],t+y));else if(v)if(v.resizable){const n={[k[y]]:!0},u={[k[y]]:`panelManager${y}Handler`};b["data-panel-resizable"]=!0;const m=n=>"L"===n||"R"===n?"width":"T"===n||"B"===n?"height":"";R=i.createElement(r,c(l(c(l({},b),{handleClasses:u}),v.resizeConfig),{defaultSize:g(null==(p=v.resizeConfig)?void 0:p.defaultSize,A,a),enable:n,key:`rootPanel-${A}`,style:w?{flexDirection:"column"}:{},onResizeStop:h({panelPos:A,direction:m(y),cb:null==(o=v.resizeConfig)?void 0:o.onResizeStop,cacheKey:a.name}),className:a.autoBorder?"resizable-default-border":""}),v.component&&i.createElement("div",{className:"panel-content-container"},v.component),s(e[y],t+y))}else R=i.createElement("div",{style:w?{flexDirection:"column"}:{},key:`rootPanel-${A}`,id:A,"data-panel-type":y,"data-panel-resizable":!1},v.component&&i.createElement("div",{className:"panel-content-container"},v.component),s(e[y],t+y))}else R=i.createElement("div",l({style:w?{flexDirection:"column"}:{},key:`rootPanel-${A}`},b),s(e[y],t+y));m.push(R)}return m})(n,a);console.log("panelTree",e);return t(e,"")};class y extends i.PureComponent{constructor(n){super(n);const a=this.props,{panelConfig:s}=a,o=((n,a)=>{var s={};for(var o in n)t.call(n,o)&&a.indexOf(o)<0&&(s[o]=n[o]);if(null!=n&&e)for(var o of e(n))a.indexOf(o)<0&&p.call(n,o)&&(s[o]=n[o]);return s})(a,["panelConfig"]),l=f(s,o);this.state={panels:l}}UNSAFE_componentWillReceiveProps(n){const a=f(n.panelConfig,n);this.setState({panels:a})}render(){const{children:n,rootSize:a}=this.props,{panels:s}=this.state;if(!s)return null;let e="row";return"T"===s[0].props["data-panel-type"]&&(e="column"),i.createElement(i.Fragment,null,n,i.createElement("div",{style:c(l(l({},m),a||{}),{display:"flex",flexDirection:e})},s))}}const A={LTL:{width:"420px",height:"auto",minWidth:"380px"},R:{width:"600px",height:"auto"},LB:{width:"auto",height:"300px"}},b={R:{component:i.createElement("div",{className:"markdown-body"},i.createElement("div",{dangerouslySetInnerHTML:{__html:'<h1>A demo of <code>panel-manager</code></h1>\n<p><code>panel-manager</code> is React Component build for manage your panels.</p>\n<p><code>re-resizable</code> is under the hood.</p>\n<h2>Feature</h2>\n<ul>\n<li>create panels declartive</li>\n<li>auto generate border</li>\n<li>memorize panel size</li>\n</ul>\n<h2>Install</h2>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> panel-manager --save\n</code></pre>\n<pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> panel-manager\n</code></pre>\n<h2>Usage</h2>\n<h3>1. Imagine your panels property</h3>\n<p>You can draw your panel property on the paper first, our just imagine it in your head.</p>\n<details>\n  <summary>demonstrate for property image</summary>\n  <image alt="first step" src="https://gw.alipayobjects.com/mdn/rms_24f06c/afts/img/A*7BdxQoZFjwcAAAAAAAAAAAAAARQnAQ">\n  </image>\n</details>\n<h3>2. Named them like <em>T(top)</em>, <em>L(left)</em>, <em>B(bottom)</em>, <em>R(right)</em></h3>\n<p><strong>⚠️️ Important Note</strong>: Because of the print order: Left, Right, Top, Bottom. You should always make L(R) first.It means you should split panels in the horizontal direction,and then in the vertical direction.</p>\n<details>\n  <summary>demonstrate for named property image</summary>\n  <image alt="second step" src="https://gw.alipayobjects.com/mdn/rms_24f06c/afts/img/A*npNYTLsE54UAAAAAAAAAAAAAARQnAQ">\n  </image>\n</details>\n<h3>3. Nest name</h3>\n<p>If panels are nest, Named them like <em>TL(top left)</em>, <em>TLB(top left top, means the panel at the top left counter)</em>\nremember the <em>T</em> and <em>L</em>  alway at the front of the name.</p>\n<details>\n  <summary>demonstrate for nest name property</summary>\n  <image alt="third step" src="https://gw.alipayobjects.com/mdn/rms_24f06c/afts/img/A*xaaSQbZuEG4AAAAAAAAAAAAAARQnAQ">\n  </image>\n</details>\n<h3>4. create config</h3>\n<p>In this example, we make <strong>R</strong>, <strong>RT</strong> and <strong>LTT</strong> as a <code>&lt;Resizable /&gt;</code> component.</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token comment">// panel-config.ts</span>\n<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IPanelConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'panel-manager\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> config<span class="token operator">:</span> IPanelConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">LTT</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    component<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">I\'m LTT panel!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n    resizable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// make LTT resizable,</span>\n    <span class="token comment">// same as Resizable props, </span>\n    <span class="token comment">// but panel-manage default set enable and size(if you enable cache prop)</span>\n    resizableConfig<span class="token operator">:</span> <span class="token punctuation">{</span> \n      defaultSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n        height<span class="token operator">:</span> <span class="token string">\'100px\'</span><span class="token punctuation">,</span>\n        width<span class="token operator">:</span> <span class="token string">\'auto\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token constant">R</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// in this example, R panel handles RT and RB panel, and R doesn\'t have other content</span>\n    <span class="token comment">// so we shouldn\'t set component field.</span>\n    resizable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// make R resizable,</span>\n    resizableConfig<span class="token operator">:</span> <span class="token punctuation">{</span>\n      defaultSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n        height<span class="token operator">:</span> <span class="token string">\'100%\'</span><span class="token punctuation">,</span>\n        width<span class="token operator">:</span> <span class="token string">\'700px\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token constant">RT</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    component<span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">I\'m RT panel!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    resizable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    resizableConfig<span class="token operator">:</span> <span class="token punctuation">{</span>\n      defaultSize<span class="token operator">:</span> <span class="token punctuation">{</span>\n        height<span class="token operator">:</span> <span class="token string">\'100px\'</span><span class="token punctuation">,</span>\n        width<span class="token operator">:</span> <span class="token string">\'auto\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// other un-resizable panel content</span>\n  <span class="token constant">LTR</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">I\'m LTR panel!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token constant">RB</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">I\'m RB panel!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token constant">LB</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">I\'m LB panel!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> \n\n<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span>\n</code></pre>\n<h3>5. use the config</h3>\n<pre class="language-tsx"><code class="language-tsx"><span class="token comment">// App.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> PanelManager <span class="token keyword">from</span> <span class="token string">\'panel-manager\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> panelConfig <span class="token keyword">from</span> <span class="token string">\'./panel-config\'</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// Note that you MUST set PanelManger\'s Parent Component size.</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token operator">:</span> <span class="token string">\'100vh\'</span><span class="token punctuation">,</span> width<span class="token operator">:</span> <span class="token string">\'100vw\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PanelManager</span></span> <span class="token attr-name">config</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>config<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n</code></pre>\n<h2>Motivation</h2>\n<p>When i was building an online editor, i tried to use the npm package <code>re-resizable</code> to create my panels. Like menu, hierarchy, toolbar, etc.\nBut when scene become complex, it\'s hard to manage and code.Case you should create more <code>Resizable</code> component to handle every panel.\nSo i create this component,it gives you an easy way to manage these panels.</p>\n'},style:{padding:"0 10px",width:"100%"}})),resizable:!0,resizeConfig:{defaultSize:A.R,minWidth:A.R.width}},LB:{component:i.createElement("div",{className:"example-panel-content name-content"},i.createElement("span",null,"LB")),resizable:!0,resizeConfig:{defaultSize:A.LB,minHeight:A.LB.height}},LTL:{component:i.createElement("div",{className:"example-panel-content name-content"},"Panel"),resizable:!0,resizeConfig:{defaultSize:A.LTL,maxWidth:A.LTL.width,minWidth:A.LTL.minWidth}},LTR:i.createElement("div",{className:"example-panel-content linear-wipe name-content"},"Manager")};u.render(i.createElement(i.StrictMode,null,i.createElement("div",{style:{height:"100vh",width:"100vw"}},i.createElement(y,{panelConfig:b,disableCache:!0,autoBorder:!0}))),document.getElementById("root"));
